name: Flow 1

on:
  issue_comment:
    types: [created]

jobs:
  deploy-hotfix:
    if: |
      github.event.issue.pull_request != null &&
      startsWith(github.event.comment.body, '/deploy hotfix')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get PR info
      id: pr
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get base branch latest commit (for squash merges)
      id: base_commit
      if: steps.extract.outputs.merge_commit == 'null'
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/${{ github.repository }}/commits/${{ steps.extract.outputs.base_branch }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Parse PR merge commit SHA
      id: extract
      run: |
        # Debug: Check what we're getting from the API

        echo "Raw PR data:"
        
        # Extract data with error handling
        MERGE_COMMIT=$(jq -r '.merge_commit_sha // "null"' pr.json)
        PR_NUMBER=$(jq -r '.number // "unknown"' pr.json)
        
        echo "Debug: MERGE_COMMIT=$MERGE_COMMIT"
        echo "Debug: PR_NUMBER=$PR_NUMBER"
        
        # For squash merges, merge_commit_sha is null, so we need to get the squashed commit
        if [ "$MERGE_COMMIT" = "null" ]; then
          echo "Detected squash merge, getting base branch info..."
          # Get the squashed commit SHA by looking at the base branch's latest commit
          BASE_BRANCH=$(jq -r '.base.ref // "main"' pr.json)
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          
          # Get the latest commit on the base branch (this is the squashed commit)
          if [ -n "${{ steps.base_commit.outputs.data }}" ]; then
            echo "${{ steps.base_commit.outputs.data }}" > base_commit.json
            SQUASHED_COMMIT=$(jq -r '.sha // "unknown"' base_commit.json)
            echo "merge_commit=$SQUASHED_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "Error: No base commit data available"
            exit 1
          fi
        else
          echo "merge_commit=$MERGE_COMMIT" >> $GITHUB_OUTPUT
        fi
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT